// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (
    token,
    created_at,
    updated_at,
    expires_at,
    revoked_at,
    user_id
) VALUES (
    $1,
    NOW(),
    NOW(),
    NOW() + INTERVAL '60 days',
    NULL,
    $2
)
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

type CreateRefreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT users.id, users.created_at, users.updated_at, users.email, users.hashed_password, users.is_chirpy_red, refresh_tokens.token, refresh_tokens.created_at, refresh_tokens.updated_at, refresh_tokens.expires_at, refresh_tokens.revoked_at, refresh_tokens.user_id FROM refresh_tokens
JOIN users 
    ON users.id = refresh_tokens.user_id
WHERE token = $1 AND refresh_tokens.revoked_at IS NULL
`

type GetUserFromRefreshTokenRow struct {
	User         User
	RefreshToken RefreshToken
}

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (GetUserFromRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i GetUserFromRefreshTokenRow
	err := row.Scan(
		&i.User.ID,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
		&i.User.Email,
		&i.User.HashedPassword,
		&i.User.IsChirpyRed,
		&i.RefreshToken.Token,
		&i.RefreshToken.CreatedAt,
		&i.RefreshToken.UpdatedAt,
		&i.RefreshToken.ExpiresAt,
		&i.RefreshToken.RevokedAt,
		&i.RefreshToken.UserID,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens 
SET updated_at = NOW(), revoked_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
